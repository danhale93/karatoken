{
  "React Native Screen": {
    "prefix": "rnscreen",
    "body": [
      "import React, { useState, useEffect } from 'react';",
      "import { View, Text, StyleSheet, SafeAreaView } from 'react-native';",
      "import { LinearGradient } from 'expo-linear-gradient';",
      "",
      "export default function ${1:ScreenName}() {",
      "  const [loading, setLoading] = useState(false);",
      "",
      "  useEffect(() => {",
      "    // Load data",
      "    loadData();",
      "  }, []);",
      "",
      "  const loadData = async () => {",
      "    try {",
      "      setLoading(true);",
      "      // TODO: Add your data loading logic",
      "    } catch (error) {",
      "      console.error('Error loading data:', error);",
      "    } finally {",
      "      setLoading(false);",
      "    }",
      "  };",
      "",
      "  return (",
      "    <SafeAreaView style={styles.container}>",
      "      <LinearGradient",
      "        colors={['#1a1a2e', '#16213e', '#0f3460']}",
      "        style={styles.gradient}",
      "      >",
      "        <Text style={styles.title}>${2:Screen Title}</Text>",
      "        {loading ? (",
      "          <Text style={styles.loading}>Loading...</Text>",
      "        ) : (",
      "          <View>",
      "            {/* Your content here */}",
      "          </View>",
      "        )}",
      "      </LinearGradient>",
      "    </SafeAreaView>",
      "  );",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    flex: 1,",
      "  },",
      "  gradient: {",
      "    flex: 1,",
      "    padding: 20,",
      "  },",
      "  title: {",
      "    fontSize: 24,",
      "    fontWeight: 'bold',",
      "    color: '#fff',",
      "    textAlign: 'center',",
      "    marginBottom: 20,",
      "  },",
      "  loading: {",
      "    color: '#fff',",
      "    textAlign: 'center',",
      "    fontSize: 16,",
      "  },",
      "});"
    ],
    "description": "Creates a complete React Native screen with gradient background"
  },
  "Karatoken Service": {
    "prefix": "ktservice",
    "body": [
      "/**",
      " * ${1:ServiceName} Service for Karatoken",
      " * Handles ${2:service description}",
      " */",
      "",
      "class ${1:ServiceName}Service {",
      "  private static instance: ${1:ServiceName}Service;",
      "",
      "  static getInstance(): ${1:ServiceName}Service {",
      "    if (!${1:ServiceName}Service.instance) {",
      "      ${1:ServiceName}Service.instance = new ${1:ServiceName}Service();",
      "    }",
      "    return ${1:ServiceName}Service.instance;",
      "  }",
      "",
      "  async ${3:methodName}(${4:params}): Promise<${5:ReturnType}> {",
      "    try {",
      "      // TODO: Implement ${3:methodName} logic",
      "      console.log('${1:ServiceName}Service.${3:methodName}:', ${4:params});",
      "      ",
      "      // Your implementation here",
      "      ",
      "      return {} as ${5:ReturnType};",
      "    } catch (error) {",
      "      console.error('Error in ${3:methodName}:', error);",
      "      throw error;",
      "    }",
      "  }",
      "}",
      "",
      "export default ${1:ServiceName}Service.getInstance();"
    ],
    "description": "Creates a Karatoken service with singleton pattern"
  },
  "AI Component": {
    "prefix": "aicomp",
    "body": [
      "import React, { useState, useEffect } from 'react';",
      "import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';",
      "",
      "interface ${1:ComponentName}Props {",
      "  ${2:propName}: ${3:PropType};",
      "}",
      "",
      "export const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({ ${2:propName} }) => {",
      "  const [isActive, setIsActive] = useState(false);",
      "",
      "  const handlePress = () => {",
      "    setIsActive(!isActive);",
      "    // TODO: Add your logic here",
      "  };",
      "",
      "  return (",
      "    <TouchableOpacity style={styles.container} onPress={handlePress}>",
      "      <Text style={[styles.text, isActive && styles.activeText]}>",
      "        ${4:Component Content}",
      "      </Text>",
      "    </TouchableOpacity>",
      "  );",
      "};",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    padding: 15,",
      "    borderRadius: 8,",
      "    backgroundColor: '#1a1a2e',",
      "    marginVertical: 5,",
      "  },",
      "  text: {",
      "    color: '#fff',",
      "    fontSize: 16,",
      "  },",
      "  activeText: {",
      "    color: '#00d4ff',",
      "  },",
      "});"
    ],
    "description": "Creates an interactive AI-powered component"
  },
  "YouTube Integration": {
    "prefix": "youtube",
    "body": [
      "import youtubeService from '../services/youtubeService';",
      "",
      "const handleYouTubeSearch = async (query: string) => {",
      "  try {",
      "    const results = await youtubeService.searchSongs(query);",
      "    console.log('YouTube search results:', results);",
      "    // Handle results",
      "  } catch (error) {",
      "    console.error('YouTube search error:', error);",
      "  }",
      "};"
    ],
    "description": "YouTube API integration snippet"
  },
  "Crypto Wallet": {
    "prefix": "wallet",
    "body": [
      "import cryptocurrencyService from '../services/cryptocurrencyService';",
      "",
      "const handleWalletAction = async () => {",
      "  try {",
      "    const balance = await cryptocurrencyService.getBalance();",
      "    console.log('$KARA Balance:', balance);",
      "    // Handle wallet operations",
      "  } catch (error) {",
      "    console.error('Wallet error:', error);",
      "  }",
      "};"
    ],
    "description": "Crypto wallet integration snippet"
  }
}