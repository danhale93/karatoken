// Powered by OnSpace.AI - Karatoken Studio
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  TextInput,
  StyleSheet,
  Alert,
  Modal,
  FlatList,
  Dimensions,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { MaterialIcons } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import { router } from 'expo-router';
import { useAuthStore } from '../../hooks/useAuthStore';

const { width } = Dimensions.get('window');

interface AIStudioProject {
  id: string;
  title: string;
  genre: string;
  lyrics: string;
  tempo: number;
  pitch: number;
  createdAt: string;
  isGenerated: boolean;
}

const GENRES = [
  'Pop', 'Rock', 'Hip-Hop', 'Country', 'Jazz', 'Blues', 'Electronic', 'R&B',
  'Folk', 'Classical', 'Reggae', 'Metal', 'Indie', 'Latin', 'K-Pop', 'Lo-fi'
];

export default function StudioScreen() {
  const { user } = useAuthStore();
  const [projects, setProjects] = useState<AIStudioProject[]>([]);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showGenreModal, setShowGenreModal] = useState(false);
  const [selectedProject, setSelectedProject] = useState<AIStudioProject | null>(null);
  
  // New song creation state
  const [songTitle, setSongTitle] = useState('');
  const [songLyrics, setSongLyrics] = useState('');
  const [selectedGenre, setSelectedGenre] = useState('Pop');
  const [tempo, setTempo] = useState(120);
  const [pitch, setPitch] = useState(0);
  const [isGenerating, setIsGenerating] = useState(false);

  useEffect(() => {
    loadProjects();
  }, []);

  const loadProjects = () => {
    // Mock data - in real app, this would come from backend
    const mockProjects: AIStudioProject[] = [
      {
        id: '1',
        title: 'Digital Dreams',
        genre: 'Electronic',
        lyrics: 'In the neon lights we dance tonight...',
        tempo: 128,
        pitch: 2,
        createdAt: new Date().toISOString(),
        isGenerated: true,
      },
      {
        id: '2',
        title: 'Country Road Home',
        genre: 'Country',
        lyrics: 'Take me back to where I belong...',
        tempo: 90,
        pitch: -1,
        createdAt: new Date().toISOString(),
        isGenerated: false,
      },
    ];
    setProjects(mockProjects);
  };

  const generateSongWithAI = async () => {
    if (!songTitle.trim()) {
      Alert.alert('Error', 'Please enter a song title');
      return;
    }

    setIsGenerating(true);
    
    try {
      // Simulate AI generation delay
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const generatedLyrics = `[Generated by Karatoken AI]

Verse 1:
${songTitle} echoes through the night
A melody that feels so right
In the rhythm we find our way
Dancing till the break of day

Chorus:
${songTitle}, ${songTitle}
Sing it loud, sing it true
${songTitle}, ${songTitle}
This song was made for you

Verse 2:
Every note tells a story
Every beat builds up the glory
In this ${selectedGenre.toLowerCase()} we trust
Music rising from the dust

(Repeat Chorus)`;

      const newProject: AIStudioProject = {
        id: Date.now().toString(),
        title: songTitle,
        genre: selectedGenre,
        lyrics: generatedLyrics,
        tempo,
        pitch,
        createdAt: new Date().toISOString(),
        isGenerated: true,
      };

      setProjects([newProject, ...projects]);
      setShowCreateModal(false);
      setSongTitle('');
      setSongLyrics('');
      
      Alert.alert('Success', 'AI has generated your song! You can now edit and customize it.');
    } catch (error) {
      Alert.alert('Error', 'Failed to generate song with AI');
    } finally {
      setIsGenerating(false);
    }
  };

  const swapGenre = async (project: AIStudioProject, newGenre: string) => {
    Alert.alert(
      'Genre Swap',
      `Transform "${project.title}" from ${project.genre} to ${newGenre}?`,
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Transform',
          onPress: async () => {
            // Simulate AI genre transformation
            const updatedProjects = projects.map(p => 
              p.id === project.id 
                ? { 
                    ...p, 
                    genre: newGenre,
                    tempo: newGenre === 'Electronic' ? 128 : newGenre === 'Country' ? 90 : 120,
                    lyrics: p.lyrics + `\n\n[Transformed to ${newGenre} style by Karatoken AI]`
                  }
                : p
            );
            setProjects(updatedProjects);
            setShowGenreModal(false);
            Alert.alert('Success', `Song transformed to ${newGenre} style!`);
          }
        }
      ]
    );
  };

  const renderProject = ({ item }: { item: AIStudioProject }) => (
    <TouchableOpacity 
      style={styles.projectCard}
      onPress={() => setSelectedProject(item)}
    >
      <LinearGradient
        colors={item.isGenerated ? ['#6B46C1', '#8B5CF6'] : ['#059669', '#10B981']}
        style={styles.projectGradient}
      >
        <View style={styles.projectHeader}>
          <View style={styles.projectInfo}>
            <Text style={styles.projectTitle}>{item.title}</Text>
            <Text style={styles.projectGenre}>{item.genre}</Text>
          </View>
          <MaterialIcons 
            name={item.isGenerated ? 'auto-awesome' : 'edit'} 
            size={24} 
            color="#FFFFFF" 
          />
        </View>
        <View style={styles.projectDetails}>
          <View style={styles.projectStat}>
            <MaterialIcons name="speed" size={16} color="#FFFFFF" />
            <Text style={styles.projectStatText}>{item.tempo} BPM</Text>
          </View>
          <View style={styles.projectStat}>
            <MaterialIcons name="music-note" size={16} color="#FFFFFF" />
            <Text style={styles.projectStatText}>+{item.pitch}</Text>
          </View>
        </View>
      </LinearGradient>
    </TouchableOpacity>
  );

  const renderGenre = ({ item }: { item: string }) => (
    <TouchableOpacity 
      style={[
        styles.genreOption,
        selectedGenre === item && styles.genreOptionSelected
      ]}
      onPress={() => setSelectedGenre(item)}
    >
      <Text style={[
        styles.genreText,
        selectedGenre === item && styles.genreTextSelected
      ]}>
        {item}
      </Text>
    </TouchableOpacity>
  );

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView showsVerticalScrollIndicator={false}>
        {/* Header */}
        <View style={styles.header}>
          <Text style={styles.title}>AI Studio</Text>
          <TouchableOpacity 
            style={styles.createButton}
            onPress={() => setShowCreateModal(true)}
          >
            <MaterialIcons name="add" size={24} color="#FFFFFF" />
          </TouchableOpacity>
        </View>

        {/* AI Features Banner */}
        <LinearGradient
          colors={['#8B5CF6', '#A855F7']}
          style={styles.aiFeaturesBanner}
        >
          <View style={styles.aiFeatureContent}>
            <MaterialIcons name="auto-awesome" size={32} color="#FFFFFF" />
            <View style={styles.aiFeatureText}>
              <Text style={styles.aiFeatureTitle}>AI-Powered Creation</Text>
              <Text style={styles.aiFeatureSubtitle}>
                Generate, transform, and perfect your songs with AI
              </Text>
            </View>
          </View>
        </LinearGradient>

        {/* Quick Actions */}
        <View style={styles.quickActions}>
          <TouchableOpacity 
            style={styles.quickAction}
            onPress={() => setShowCreateModal(true)}
          >
            <MaterialIcons name="auto-awesome" size={24} color="#6B46C1" />
            <Text style={styles.quickActionText}>Generate Song</Text>
          </TouchableOpacity>
          
          <TouchableOpacity style={styles.quickAction}>
            <MaterialIcons name="swap-horiz" size={24} color="#059669" />
            <Text style={styles.quickActionText}>Genre Swap</Text>
          </TouchableOpacity>
          
          <TouchableOpacity style={styles.quickAction}>
            <MaterialIcons name="tune" size={24} color="#DC2626" />
            <Text style={styles.quickActionText}>Vocal Training</Text>
          </TouchableOpacity>
        </View>

        {/* Projects List */}
        <View style={styles.projectsSection}>
          <Text style={styles.sectionTitle}>Your Projects</Text>
          {projects.length > 0 ? (
            <FlatList
              data={projects}
              renderItem={renderProject}
              keyExtractor={(item) => item.id}
              scrollEnabled={false}
            />
          ) : (
            <View style={styles.emptyState}>
              <MaterialIcons name="music-note" size={64} color="#6B7280" />
              <Text style={styles.emptyStateText}>No projects yet</Text>
              <Text style={styles.emptyStateSubtext}>
                Create your first AI-generated song
              </Text>
            </View>
          )}
        </View>
      </ScrollView>

      {/* Create Song Modal */}
      <Modal
        visible={showCreateModal}
        animationType="slide"
        presentationStyle="pageSheet"
      >
        <SafeAreaView style={styles.modalContainer}>
          <View style={styles.modalHeader}>
            <TouchableOpacity onPress={() => setShowCreateModal(false)}>
              <MaterialIcons name="close" size={24} color="#FFFFFF" />
            </TouchableOpacity>
            <Text style={styles.modalTitle}>Create with AI</Text>
            <TouchableOpacity 
              onPress={generateSongWithAI}
              disabled={isGenerating}
            >
              <Text style={[styles.modalAction, { opacity: isGenerating ? 0.5 : 1 }]}>
                {isGenerating ? 'Generating...' : 'Generate'}
              </Text>
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.modalContent}>
            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Song Title</Text>
              <TextInput
                style={styles.textInput}
                value={songTitle}
                onChangeText={setSongTitle}
                placeholder="Enter song title..."
                placeholderTextColor="#6B7280"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Genre</Text>
              <FlatList
                data={GENRES}
                renderItem={renderGenre}
                keyExtractor={(item) => item}
                numColumns={4}
                scrollEnabled={false}
              />
            </View>

            <View style={styles.sliderGroup}>
              <Text style={styles.inputLabel}>Tempo: {tempo} BPM</Text>
              <View style={styles.slider}>
                <TouchableOpacity onPress={() => setTempo(Math.max(60, tempo - 10))}>
                  <MaterialIcons name="remove" size={24} color="#FFFFFF" />
                </TouchableOpacity>
                <Text style={styles.sliderValue}>{tempo}</Text>
                <TouchableOpacity onPress={() => setTempo(Math.min(200, tempo + 10))}>
                  <MaterialIcons name="add" size={24} color="#FFFFFF" />
                </TouchableOpacity>
              </View>
            </View>

            <View style={styles.sliderGroup}>
              <Text style={styles.inputLabel}>Pitch: {pitch > 0 ? '+' : ''}{pitch}</Text>
              <View style={styles.slider}>
                <TouchableOpacity onPress={() => setPitch(Math.max(-12, pitch - 1))}>
                  <MaterialIcons name="remove" size={24} color="#FFFFFF" />
                </TouchableOpacity>
                <Text style={styles.sliderValue}>{pitch > 0 ? '+' : ''}{pitch}</Text>
                <TouchableOpacity onPress={() => setPitch(Math.min(12, pitch + 1))}>
                  <MaterialIcons name="add" size={24} color="#FFFFFF" />
                </TouchableOpacity>
              </View>
            </View>
          </ScrollView>
        </SafeAreaView>
      </Modal>

      {/* Genre Swap Modal */}
      <Modal
        visible={showGenreModal}
        animationType="slide"
        transparent={true}
      >
        <View style={styles.genreModalOverlay}>
          <View style={styles.genreModalContent}>
            <Text style={styles.genreModalTitle}>Choose New Genre</Text>
            <FlatList
              data={GENRES}
              renderItem={({ item }) => (
                <TouchableOpacity 
                  style={styles.genreModalOption}
                  onPress={() => selectedProject && swapGenre(selectedProject, item)}
                >
                  <Text style={styles.genreModalOptionText}>{item}</Text>
                </TouchableOpacity>
              )}
              keyExtractor={(item) => item}
            />
            <TouchableOpacity 
              style={styles.genreModalCancel}
              onPress={() => setShowGenreModal(false)}
            >
              <Text style={styles.genreModalCancelText}>Cancel</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#111827',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingTop: 20,
    paddingBottom: 10,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  createButton: {
    backgroundColor: '#6B46C1',
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  aiFeaturesBanner: {
    margin: 20,
    borderRadius: 16,
    padding: 20,
  },
  aiFeatureContent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  aiFeatureText: {
    marginLeft: 16,
    flex: 1,
  },
  aiFeatureTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  aiFeatureSubtitle: {
    fontSize: 14,
    color: '#FFFFFF',
    opacity: 0.8,
    marginTop: 4,
  },
  quickActions: {
    flexDirection: 'row',
    paddingHorizontal: 20,
    marginBottom: 20,
  },
  quickAction: {
    flex: 1,
    backgroundColor: '#1F2937',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
    marginHorizontal: 4,
  },
  quickActionText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '600',
    marginTop: 8,
    textAlign: 'center',
  },
  projectsSection: {
    paddingHorizontal: 20,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 16,
  },
  projectCard: {
    marginBottom: 12,
    borderRadius: 16,
    overflow: 'hidden',
  },
  projectGradient: {
    padding: 16,
  },
  projectHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  projectInfo: {
    flex: 1,
  },
  projectTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  projectGenre: {
    fontSize: 14,
    color: '#FFFFFF',
    opacity: 0.8,
    marginTop: 4,
  },
  projectDetails: {
    flexDirection: 'row',
  },
  projectStat: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 16,
  },
  projectStatText: {
    color: '#FFFFFF',
    fontSize: 12,
    marginLeft: 4,
  },
  emptyState: {
    alignItems: 'center',
    paddingVertical: 40,
  },
  emptyStateText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#6B7280',
    marginTop: 16,
  },
  emptyStateSubtext: {
    fontSize: 14,
    color: '#6B7280',
    marginTop: 8,
    textAlign: 'center',
  },
  modalContainer: {
    flex: 1,
    backgroundColor: '#111827',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#374151',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  modalAction: {
    fontSize: 16,
    fontWeight: '600',
    color: '#10B981',
  },
  modalContent: {
    flex: 1,
    padding: 20,
  },
  inputGroup: {
    marginBottom: 24,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
    marginBottom: 8,
  },
  textInput: {
    backgroundColor: '#1F2937',
    borderRadius: 12,
    padding: 16,
    color: '#FFFFFF',
    fontSize: 16,
  },
  genreOption: {
    flex: 1,
    backgroundColor: '#1F2937',
    margin: 4,
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  genreOptionSelected: {
    backgroundColor: '#6B46C1',
  },
  genreText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '600',
  },
  genreTextSelected: {
    color: '#FFFFFF',
  },
  sliderGroup: {
    marginBottom: 24,
  },
  slider: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#1F2937',
    borderRadius: 12,
    padding: 16,
  },
  sliderValue: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: 'bold',
  },
  genreModalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
  genreModalContent: {
    backgroundColor: '#1F2937',
    borderRadius: 16,
    padding: 20,
    maxHeight: 400,
  },
  genreModalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#FFFFFF',
    marginBottom: 16,
    textAlign: 'center',
  },
  genreModalOption: {
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#374151',
  },
  genreModalOptionText: {
    color: '#FFFFFF',
    fontSize: 16,
    textAlign: 'center',
  },
  genreModalCancel: {
    marginTop: 16,
    padding: 16,
    backgroundColor: '#374151',
    borderRadius: 12,
  },
  genreModalCancelText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
    textAlign: 'center',
  },
});